#ifndef __crynsnd_font_dotmatrix_font_h__
#define __crynsnd_font_dotmatrix_font_h__

#include <cstdio>

#include "font/font.h"

namespace crynsnd {
namespace fonts {
namespace {

static const uint8_t ALPHABET_SIZE = 61;

static const uint8_t LETTER_WIDTH = 5;

static constexpr char ALL_GLYPHS[ALPHABET_SIZE]{
    'A', 'B', 'C', 'D',  'E', 'F', 'G', 'H', 'I', 'J',  'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T',  'U', 'V', 'W', 'X', 'Y', 'Z',  '.', '0', '1', '2', '3', '4',
    '5', '6', '7', '8',  '9', '+', '-', '=', '/', '\\', '[', ']', ' ', '?', '<', '>',
    '^', ':', '"', '\'', '!', '%', '(', ')', '|', '@',  '#', ',', '_'};

// Based on
// https://www.shutterstock.com/image-illustration/digital-dotmatrix-font-winter-colors-508536268
static const uint8_t FONT[] = {
    // A
    0b1111110,
    0b0001001,
    0b0001001,
    0b0001001,
    0b1111110,
    // B
    0b1111111,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0110110,
    // C
    0b0111110,
    0b1000001,
    0b1000001,
    0b1000001,
    0b0100010,
    // D
    0b1111111,
    0b1000001,
    0b1000001,
    0b1000001,
    0b0111110,
    // E
    0b1111111,
    0b1001001,
    0b1001001,
    0b1001001,
    0b1001001,
    // F
    0b1111111,
    0b0001001,
    0b0001001,
    0b0001001,
    0b0000001,
    // G
    0b0111110,
    0b1000001,
    0b1001001,
    0b1001001,
    0b0111010,
    // H
    0b1111111,
    0b0001000,
    0b0001000,
    0b0001000,
    0b1111111,
    // I
    0b0000000,
    0b1000001,
    0b1111111,
    0b1000001,
    0b0000000,
    // J
    0b0100000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b0111111,
    // K
    0b1111111,
    0b0001000,
    0b0010100,
    0b0100010,
    0b1000001,
    // L
    0b1111111,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    // M
    0b1111111,
    0b0000010,
    0b0000100,
    0b0000010,
    0b1111111,
    // N
    0b1111111,
    0b0000100,
    0b0001000,
    0b0010000,
    0b1111111,
    // O
    0b0111110,
    0b1000001,
    0b1000001,
    0b1000001,
    0b0111110,
    // P
    0b1111111,
    0b0001001,
    0b0001001,
    0b0001001,
    0b0000110,
    // Q
    0b0111110,
    0b1000001,
    0b1010001,
    0b0100001,
    0b1011110,
    // R
    0b1111111,
    0b0001001,
    0b0011001,
    0b0101001,
    0b1000110,
    // S
    0b0100110,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0110010,
    // T
    0b0000001,
    0b0000001,
    0b1111111,
    0b0000001,
    0b0000001,
    // U
    0b0111111,
    0b1000000,
    0b1000000,
    0b1000000,
    0b0111111,
    // V
    0b0011111,
    0b0100000,
    0b1000000,
    0b0100000,
    0b0011111,
    // W
    0b0111111,
    0b1000000,
    0b0110000,
    0b1000000,
    0b0111111,
    // X
    0b1100011,
    0b0010100,
    0b0001000,
    0b0010100,
    0b1100011,
    // Y
    0b0000011,
    0b0000100,
    0b1111000,
    0b0000100,
    0b0000011,
    // Z
    0b1100001,
    0b1010001,
    0b1001001,
    0b1000101,
    0b1000011,
    // .
    0b0000000,
    0b0000000,
    0b1000000,
    0b0000000,
    0b0000000,
    // 0
    0b0111110,
    0b1000001,
    0b1000001,
    0b1000001,
    0b0111110,
    // 1
    0b0000000,
    0b1000001,
    0b1111111,
    0b1000000,
    0b0000000,
    // 2
    0b1100010,
    0b1010001,
    0b1001001,
    0b1001001,
    0b1000110,
    // 3
    0b0100010,
    0b1000001,
    0b1001001,
    0b1001001,
    0b0110110,
    // 4
    0b0001111,
    0b0001000,
    0b0001000,
    0b0001000,
    0b1111111,
    // 5
    0b0101111,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0110001,
    // 6
    0b0111110,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0110010,
    // 7
    0b0000001,
    0b1110001,
    0b0001001,
    0b0000101,
    0b0000011,
    // 8
    0b0110110,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0110110,
    // 9
    0b0100110,
    0b1001001,
    0b1001001,
    0b1001001,
    0b0111110,
    // +
    0b0001000,
    0b0001000,
    0b0111110,
    0b0001000,
    0b0001000,
    // -
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    // =
    0b0010100,
    0b0010100,
    0b0010100,
    0b0010100,
    0b0010100,
    // forward slash
    0b0100000,
    0b0010000,
    0b0001000,
    0b0000100,
    0b0000010,
    // back slash
    0b0000010,
    0b0000100,
    0b0001000,
    0b0010000,
    0b0100000,
    // [
    0b0000000,
    0b1111111,
    0b1000001,
    0b0000000,
    0b0000000,
    // ]
    0b0000000,
    0b0000000,
    0b1000001,
    0b1111111,
    0b0000000,
    // empty
    0b0000000,
    0b0000000,
    0b0000000,
    0b0000000,
    0b0000000,
    // ?
    0b0000010,
    0b0000001,
    0b1011001,
    0b0000101,
    0b0000010,
    // <
    0b0000000,
    0b0001000,
    0b0010100,
    0b0100010,
    0b0000000,
    // >
    0b0000000,
    0b0100010,
    0b0010100,
    0b0001000,
    0b0000000,
    // ^
    0b0000100,
    0b0000010,
    0b0000001,
    0b0000010,
    0b0000100,
    // :
    0b0000000,
    0b0000000,
    0b0010100,
    0b0000000,
    0b0000000,
    // "
    0b0000000,
    0b0000111,
    0b0000000,
    0b0000111,
    0b0000000,
    // '
    0b0000000,
    0b0000000,
    0b0000111,
    0b0000000,
    0b0000000,
    // !
    0b0000000,
    0b0000000,
    0b1011111,
    0b0000000,
    0b0000000,
    // %
    0b0100011,
    0b0010011,
    0b0001000,
    0b1100100,
    0b1100010,
    // (
    0b0000000,
    0b0011100,
    0b0100010,
    0b1000001,
    0b0000000,
    // )
    0b0000000,
    0b1000001,
    0b0100010,
    0b0011100,
    0b0000000,
    // |
    0b0000000,
    0b0000000,
    0b1111111,
    0b0000000,
    0b0000000,
    // @
    0b0111110,
    0b1001001,
    0b1010101,
    0b1001001,
    0b0011110,
    // #
    0b0010100,
    0b1111111,
    0b0010100,
    0b1111111,
    0b0010100,
    // ,
    0b0000000,
    0b1000000,
    0b0100000,
    0b0000000,
    0b0000000,
    // _
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    // UNKNOWN
    0b1111111,
    0b1010101,
    0b1001001,
    0b1010101,
    0b1111111,
};

}  // namespace

class DotMatrix : public Font {
 public:
  DotMatrix();
  const uint8_t GetLetterWidth(char _) const { return LETTER_WIDTH; }
  const uint16_t GetLetterIndex(char val) const;
};

}  // namespace fonts
}  // namespace crynsnd

#endif  // __crynsnd_font_dotmatrix_font_h__